#!/usr/bin/env python3
import sys
import boto3
import os
import uuid
from datetime import datetime, timedelta, timezone

# The import lib.lib will not directly work, because lib directory 
# is quite a bit in the directory chain
current_path = os.path.dirname(os.path.abspath(__file__))
parent_path = os.path.abspath(os.path.join(current_path, '..', '..', 'backend-flask'))
sys.path.append(parent_path)
from lib.db import db

# Constants
attrs = {
  'endpoint_url': 'http://localhost:8000'
}
# unset endpoint url for use with production database
if "prod" in sys.argv:
    attrs = {}

ddb = boto3.client('dynamodb', **attrs)


# Helper Functions
def get_user_uuids():
  sql = """
    SELECT 
      users.uuid,
      users.display_name,
      users.handle
    FROM users
    WHERE
      users.handle IN(
        %(my_handle)s,
        %(other_handle)s
        )
  """
  users = db.query_array_json(sql,{
    'my_handle':  'owensound',
    'other_handle': 'behlkiaan'
  })

  my_user    = next((item for item in users if item["handle"] == 'owensound'), None)
  other_user = next((item for item in users if item["handle"] == 'behlkiaan'), None)
  results = {
    'my_user': my_user,
    'other_user': other_user
  }
  print('get_user_uuids')
  print(results)
  
  return results


# Constants needed for main functions
now = datetime.now(timezone.utc).astimezone()
users = get_user_uuids()
message_group_uuid = "5ae290ed-55d1-47a0-bc6d-fe2bc2700399" 
# Moving the table chane to make it a global constant as it is used 
# in multiple functions
table_name = 'cruddur-messages'

# Main Functions
def create_message_group(client, message_group_uuid, my_user_uuid, last_message_at=None, message=None, other_user_uuid=None, other_user_display_name=None, other_user_handle=None):
  #'pk':   {'S': f"GRP#{my_user_uuid}"},
  # incidcates, the record is for Primary Key, S is for String, and f is for formatting.
  # We had decided to add GRP# while doing Data modeling to indicate that this table entry 
  # is for a message group
  record = {
    'pk':   {'S': f"GRP#{my_user_uuid}"},
    'sk':   {'S': last_message_at},
    'message_group_uuid': {'S': message_group_uuid},
    'message':  {'S': message},
    'user_uuid': {'S': other_user_uuid},
    'user_display_name': {'S': other_user_display_name},
    'user_handle': {'S': other_user_handle}
  }

  response = client.put_item(
    TableName=table_name,
    Item=record
  )
  print(response)

def create_message(client,message_group_uuid, created_at, message, my_user_uuid, my_user_display_name, my_user_handle):
  table_name = 'cruddur-messages'
  record = {
    'pk':   {'S': f"MSG#{message_group_uuid}"},
    'sk':   {'S': created_at },
    'message_uuid': { 'S': str(uuid.uuid4()) },
    'message': {'S': message},
    'user_uuid': {'S': my_user_uuid},
    'user_display_name': {'S': my_user_display_name},
    'user_handle': {'S': my_user_handle}
  }
  # insert the record into the table
  response = client.put_item(
    TableName=table_name,
    Item=record
  )
  # print the response
  print(response)

# Execution starts here -- Functions will be called from below
# We create 2 message groups, one from the perspective of initiater's and other for receiver
# Message group for Initiater 
create_message_group(
  client=ddb,
  message_group_uuid=message_group_uuid,
  my_user_uuid=users['my_user']['uuid'],
  other_user_uuid=users['other_user']['uuid'],
  other_user_handle=users['other_user']['handle'],
  other_user_display_name=users['other_user']['display_name'],
  last_message_at=now.isoformat(),
  message="this is a filler message"
)
# Message group for Receiver 
create_message_group(
  client=ddb,
  message_group_uuid=message_group_uuid,
  my_user_uuid=users['other_user']['uuid'],
  other_user_uuid=users['my_user']['uuid'],
  other_user_handle=users['my_user']['handle'],
  other_user_display_name=users['my_user']['display_name'],
  last_message_at=now.isoformat(),
  message="this is a filler message"
)

# Conversations are stored as a separate file so read them in here
with open("conversation.txt", "r") as file:
  lines = file.readlines()

for i in range(len(lines)):
  if lines[i].startswith('Person 1: '):
    key = 'my_user'
    message = lines[i].replace('Person 1: ', '')
  elif lines[i].startswith('Person 2: '):
    key = 'other_user'
    message = lines[i].replace('Person 2: ', '')
  else:
    print(lines[i])
    raise 'invalid line'
  
  #These guys are chatting very fast and the messages are separated by a one minute interval
  created_at = (now + timedelta(minutes=i)).isoformat()

  create_message(
    client=ddb,
    message_group_uuid=message_group_uuid,
    created_at=created_at,
    message=message,
    my_user_uuid=users[key]['uuid'],
    my_user_display_name=users[key]['display_name'],
    my_user_handle=users[key]['handle']
  )
